#!/usr/bin/env node

const { Bank } = require('./src/Bank');
const { TokenAuthor } = require("./src/TokenAuthor");
const { LocalBankProxy } = require('./src/LocalBankProxy');
const { RemoteBankProxy } = require('./src/RemoteBankProxy');
const { InMemoryLedgerRepo } = require('./src/InMemoryLedgerRepo');
const { InMemoryAccountRepo } = require('./src/InMemoryAccountRepo');
const { CommandLineInterface } = require('./src/CommandLineInterface');

const DEFAULT_URL = 'http://localhost:3000';

const main = (args) => {
    let local = false;
    let url = DEFAULT_URL;

    for (let i = 0 ; i < args.length ; ++i ) {
        const arg = args[i];
        if (arg == '--local' || arg == '-l') {
            local = true;
        } else if (arg.startsWith("--url=")) {
            url = arg.split("=")[1];
            if (!url) {
                console.log("Error: Invalid URL parameter");
                printUsageAndExit(1);
            }
        } else if (arg == '-h' || arg == '--help') {
            printUsageAndExit(0);
        } else {
            console.log("Error: Invalid parameter", arg);
            printUsageAndExit(1);
        }
    }

    let bankproxy;
    if (local) {
        bankproxy = makeLocalBankProxy();
    } else {
        bankproxy = makeRemoteBankProxy(url);
    }

    const cli = new CommandLineInterface(bankproxy);

    cli.run();
}

const printUsageAndExit = code => {
    console.log(`Command Line Banking Interface:
    Options:
        --local -l : Use a local bank instance. This bank runs in memory as
                     part of the cli process. No changes will persist when the process
                     ends. If omitted, a remote bank is used.
        --url=URL : Supply url of a remote bank to use. This defaults to
                    'http://localhost:3000'
        --help -h : Print usage and exit.
        `)
    process.exit(code);
};

const makeLocalBankProxy = () => {
    const accountRepo = new InMemoryAccountRepo();
    const ledgerRepo = new InMemoryLedgerRepo();
    const tokenAuthor = new TokenAuthor(accountRepo);
    const bank = new Bank(accountRepo, ledgerRepo, tokenAuthor);
    return new LocalBankProxy(bank);
};

const makeRemoteBankProxy = (url) => {
    return new RemoteBankProxy('http://localhost:3000');
};

if (require.main == module) {
    main(process.argv.slice(2));
}